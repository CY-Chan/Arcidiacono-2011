source('header.R')
#################################################################################################
# Arcidiacono and Miller (2011) coding assignment
# Matt Beamer & Cheng-Yu Chan
# 11/08/2014
#################################################################################################
source('header.R')
require(graphics)
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
grr <- function(x) { ## Gradient of 'fr'
x1 <- x[1]
x2 <- x[2]
c(-400 * x1 * (x2 - x1 * x1) - 2 * (1 - x1),
200 *      (x2 - x1 * x1))
}
optim(c(-1.2,1), fr)
(res <- optim(c(-1.2,1), fr, grr, method = "BFGS"))
res$par
optimHess(res$par, fr, grr)
optim(c(-1.2,1), fr, NULL, method = "BFGS", hessian = TRUE)
## These do not converge in the default number of steps
optim(c(-1.2,1), fr, grr, method = "CG")
optim(c(-1.2,1), fr, grr, method = "CG", control = list(type = 2))
optim(c(-1.2,1), fr, grr, method = "L-BFGS-B")
flb <- function(x)
{ p <- length(x); sum(c(1, rep(4, p-1)) * (x - c(1, x[-p])^2)^2) }
## 25-dimensional box constrained
optim(rep(3, 25), flb, NULL, method = "L-BFGS-B",
lower = rep(2, 25), upper = rep(4, 25)) # par[24] is *not* at boundary
## "wild" function , global minimum at about -15.81515
fw <- function (x)
10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80
plot(fw, -50, 50, n = 1000, main = "optim() minimising 'wild function'")
res <- optim(50, fw, method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res
fw <- function (x, y)
10*sin(0.3*x)*sin(1.3*x^2) + 0.00001*x^4 + 0.2*x+80 + y
res <- optim(50, fw, method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res <- optim(50, fw(y = 1), method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res <- optim(z = 50, fw(x = z, y = 1), method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res <- optim(par = 50, fw, y = 1, method = "SANN",
control = list(maxit = 20000, temp = 20, parscale = 20))
res
setwd("~/Projects/OPNS 523/Arcidiacono-2011/code")
source('header.R')
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
N = 10^6
theta_1 = 10
theta_2 = 1
s_1 = 1
s_2 = 4
pi_s = .25
beta = .99
eta = 10^-5 #For calculating lower bound on x
x_m = max(x_bound(eta = eta, s = s_1), x_bound(eta = eta, s = s_2))
u <- values()
#################################################################################################
# Initialize CCPs
# p is starting CCP estimate
# phat is empty but initialized for the while loop
#################################################################################################
p <-
matrix(rep(0.5, (x_m + 1) * 4), ncol = 4) %>%
rbind(c(0, 0, 1, 1)) %>%
as.data.frame
phat <-
matrix(rep(0, (x_m + 2) * 4), ncol = 4) %>%
as.data.frame
#################################################################################################
# Apply the gamma operator to the CCP until phat converges to p.
# Convergence is defined as the greatest difference between the iterations being arbitrarily small.
#################################################################################################
while(max(abs(phat - p)) > 10^(-16)){
phat <- p
# Apply the F operator to get the difference in value between keeping the engine and replacing it
vals <- Foperator(P = phat)
# Apply the lambda operator to get the updated CCPs
p <- lambda(v_bar = vals)
}
View(p)
View(p)
saveRDS(p,paste0(varSave,"trueCCP.rds"))
