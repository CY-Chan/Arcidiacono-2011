estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives <- function(s.val,beta,est.error = 10^-1){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- 0.25#runif(1,min = 0,max = 0.5)
theta <- c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value)
}
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives <- function(s.val,beta,est.error = 10^-1){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- 0.25#runif(1,min = 0,max = 0.5)
theta <- c(10,1)#c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
MLE <- function(t, c, P, q){
print(t)
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
merge(y = q, by = "x.t") %>%
mutate(q.s = ifelse(s == s.val[1], q_1, q_2)) %>%
mutate(logl = Total_replaced * log(likelihood^q.s)) %>%
select(logl) %>%
sum
}
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = (fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value)
}
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
P<-CCP
t<-theta
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)
)
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced))
c<-data
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced))
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
merge(y = q, by = "x.t") %>%
mutate(q.s = ifelse(s == s.val[1], q_1, q_2))
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
merge(y = q, by = "x.t")
q<-q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
q<-q.s
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
merge(y = q, by = "x.t") %>%
mutate(q.s = ifelse(s == s.val[1], q_1, q_2)) %>%
mutate(logl = Total_replaced * log(likelihood^q.s))
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
CCP.to.likelihood %>%
merge(y = c, by.x = "x.t", by.y = "replace_Period", all.x = TRUE) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
merge(y = q, by = "x.t") %>%
mutate(q.s = ifelse(s == s.val[1], q_1, q_2)) %>%
mutate(logl = Total_replaced * log(likelihood^q.s)) %>%
select(logl) %>%
sum
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = (fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = (fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
?optim
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = list(fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value)
}
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
trueCCP <- merge(CCP, trueCCP, by.x = "x.t", by.y = "c(0:53)") %>%
mutate(prob.replace = ifelse(s == s.val[1], f_s1.1, f_s2.1)) %>%
mutate(prob.dont.replace = ifelse(s == s.val[1], f_s1, f_s2)) %>%
select(x.t,s,prob.replace,prob.dont.replace)
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
trueCCP<- cbind(c(0:53),readRDS(paste0(varSave,"trueCCP.rds")))
trueCCP <- merge(CCP, trueCCP, by.x = "x.t", by.y = "c(0:53)") %>%
mutate(prob.replace = ifelse(s == s.val[1], f_s1.1, f_s2.1)) %>%
mutate(prob.dont.replace = ifelse(s == s.val[1], f_s1, f_s2)) %>%
select(x.t,s,prob.replace,prob.dont.replace)
estimatePrimitives <- function(s.val,beta,est.error = 10^-1){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- 0.25#runif(1,min = 0,max = 0.5)
theta <- c(10,1)#c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
estimatePrimitives(s.val,beta)
test<- rlply(10, estimatePrimitives(s.val,beta))
global.ind<- which.max(laply(test, function(m) m$MLEval))
final<- test[[global.ind]]
final
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s))
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s)
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s)
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t)
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood))
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- 0.27#runif(1,min = 0,max = 0.5)
theta <- c(10,1)#c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
pi_s<-0.27
CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
CCP
estimatePrimitives(s.val,beta,est.error = 10^-1)
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = list(fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value, q.s = q.s)
}
estimatePrimitives(s.val,beta,est.error = 10^-1)
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test
plot(test[[5]]$q_2)
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- 0.27#runif(1,min = 0,max = 0.5)
theta <- c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test
# OUTPUT: thetahat, estimated parameters theta and pi_s
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0,max = 0.5)
theta <- c(runif(1,min = 6,max = 14),runif(1,min = 0,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test
test<- rlply(10, estimatePrimitives(s.val,beta,est.error = 10^-1))
global.ind<- which.max(laply(test, function(m) m$MLEval))
final<- test[[global.ind]]
estimatePrimitives(s.val,beta,est.error = 10^-1)
estimatePrimitives(s.val,beta,est.error = 10^-1)
estimatePrimitives(s.val,beta,est.error = 10^-1)
estimatePrimitives(s.val,beta,est.error = 10^-1)
estimatePrimitives(s.val,beta,est.error = 10^-1)
test<- rlply(10, estimatePrimitives(s.val,beta,est.error = 10^-1))
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'BFGS', lower = c(0,0), control = list(fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value)
}
test<- rlply(10, estimatePrimitives(s.val,beta,est.error = 10^-1))
?optim
warnings()
estimatePrimitives(s.val,beta,est.error = 10^-1)
EM.operator <- function(CCP, pi_s, theta){
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCP <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP, q = q.s,
method = 'L-BFGS-B', lower = c(0,0), control = list(fnscale = -1)) # control$fnscale = -1 turns it into a maximization problem
theta <- results$par
est <- list(CCP = CCP, pi_s = pi_s, theta = theta, MLEval = results$value)
}
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
trueCCP
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(1,10) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
stimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(10,1) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(10,1) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>%
mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
View(CCP)
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(10,1) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test<- rlply(10, estimatePrimitives(s.val,beta,est.error = 10^-1))
test
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(5,5) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- trueCCP#expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- rlply(10, estimatePrimitives(s.val,beta,est.error = 10^-1))
estimatePrimitives <- function(s.val,beta,est.error = 10^-3){
# Need to figure out how to run at multiple different starting values and take global max of theta likelihood
pi_s <- runif(1,min = 0.1,max = 0.5)
theta <- c(10,1) #c(runif(1,min = 6,max = 14),runif(1,min = 0.1,max = 2))
CCP <- expand.grid(s = s.val,x.t = seq(0,x_m)) %>% mutate(prob.replace = runif(nrow(CCP)),prob.dont.replace = 1-prob.replace)
(est <- list(CCP = CCP,pi_s = pi_s, theta = theta))
delta <- est.error + 1
while(delta > est.error){
print("est")
est.next=EM.operator(CCP=est$CCP, est$pi_s, est$theta)
delta=max(abs(est$CCP - est.next$CCP),abs(est$pi_s - est.next$pi_s),abs(est$theta - est.next$theta))
est=est.next
}
return(est)
}
test<- estimatePrimitives(s.val,beta,est.error = 10^-1)
test
