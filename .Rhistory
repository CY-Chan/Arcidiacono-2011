todeath(engine_count[2,1], engine_count[2,2]))
engines<-
mutate(engines, replace_Period = apply(history,2,which.min) - 1) %>%
arrange(engine_number)
saveRDS(engines,"engines_data.rds")             # Save using saveRDS() for later use
#################################################################################################
# Arcidiacono and Miller (2011) coding assignment
# Matt Beamer & Cheng-Yu Chan
# 11/08/2014
#################################################################################################
source('header.R')
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
N = 10^6
theta_1 = 10
theta_2 = 1
s_1 = 1
s_2 = 4
pi_s = .25
beta = .99
eta = 10^-5 #For calculating lower bound on x
x_m = max(x_bound(eta = eta, s = s_1), x_bound(eta = eta, s = s_2))
u <- values()
#################################################################################################
# Initialize CCPs
# p is starting CCP estimate
# phat is empty but initialized for the while loop
#################################################################################################
p <-
matrix(rep(0.5, (x_m + 1) * 4), ncol = 4) %>%
rbind(c(0, 0, 1, 1)) %>%
as.data.frame
phat <-
matrix(rep(0, (x_m + 2) * 4), ncol = 4) %>%
as.data.frame
#################################################################################################
# Apply the gamma operator to the CCP until phat converges to p.
# Convergence is defined as the greatest difference between the iterations being arbitrarily small.
#################################################################################################
while(max(abs(phat - p)) > 10^(-16)){
phat <- p
# Apply the F operator to get the difference in value between keeping the engine and replacing it
vals <- Foperator(P = phat)
# Apply the lambda operator to get the updated CCPs
p <- lambda(v_bar = vals)
}
#################################################################################################
# For N engines, with pi_s * N of them of type s_1 and (1 - pi_s) of them of type s_2, find the time until each engine is
# new again (replaced in the last period). Store the results in a data frame with three columns:
#   Column 1: engine number, from 1 to N
#   Column 2: type, 1 for s_1 and 2 for s_2
#   Column 3: mileage at replacement, x
#################################################################################################
engines <- data.frame(
engine_number = 1:N,
type = rbinom(N, 1, 1 - pi_s)
) %>%
mutate(type = type + 1) %>%
arrange(type)                                 # Sort by brand for easy merging of mileage data later
engine_count<- data.frame(table(engines[2]))    # Number of each brand from random draw.
history<-
cbind(todeath(engine_count[1, 1], engine_count[1, 2]),
todeath(engine_count[2, 1], engine_count[2, 2]))
engines<-
mutate(engines, replace_Period = apply(history, 2, which.min) - 1) %>%
arrange(engine_number)
saveRDS(engines,paste0(varSave,"engines_data.rds"))             # Save using saveRDS() for later use
setwd("~/Projects/OPNS 523/Arcidiacono-2011/code")
#################################################################################################
# Arcidiacono and Miller (2011) coding assignment
# Matt Beamer & Cheng-Yu Chan
# 11/08/2014
#################################################################################################
source('header.R')
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
N = 10^6
theta_1 = 10
theta_2 = 1
s_1 = 1
s_2 = 4
pi_s = .25
beta = .99
eta = 10^-5 #For calculating lower bound on x
x_m = max(x_bound(eta = eta, s = s_1), x_bound(eta = eta, s = s_2))
u <- values()
#################################################################################################
# Initialize CCPs
# p is starting CCP estimate
# phat is empty but initialized for the while loop
#################################################################################################
p <-
matrix(rep(0.5, (x_m + 1) * 4), ncol = 4) %>%
rbind(c(0, 0, 1, 1)) %>%
as.data.frame
phat <-
matrix(rep(0, (x_m + 2) * 4), ncol = 4) %>%
as.data.frame
#################################################################################################
# Apply the gamma operator to the CCP until phat converges to p.
# Convergence is defined as the greatest difference between the iterations being arbitrarily small.
#################################################################################################
while(max(abs(phat - p)) > 10^(-16)){
phat <- p
# Apply the F operator to get the difference in value between keeping the engine and replacing it
vals <- Foperator(P = phat)
# Apply the lambda operator to get the updated CCPs
p <- lambda(v_bar = vals)
}
#################################################################################################
# For N engines, with pi_s * N of them of type s_1 and (1 - pi_s) of them of type s_2, find the time until each engine is
# new again (replaced in the last period). Store the results in a data frame with three columns:
#   Column 1: engine number, from 1 to N
#   Column 2: type, 1 for s_1 and 2 for s_2
#   Column 3: mileage at replacement, x
#################################################################################################
engines <- data.frame(
engine_number = 1:N,
type = rbinom(N, 1, 1 - pi_s)
) %>%
mutate(type = type + 1) %>%
arrange(type)                                 # Sort by brand for easy merging of mileage data later
engine_count<- data.frame(table(engines[2]))    # Number of each brand from random draw.
history<-
cbind(todeath(engine_count[1, 1], engine_count[1, 2]),
todeath(engine_count[2, 1], engine_count[2, 2]))
engines<-
mutate(engines, replace_Period = apply(history, 2, which.min) - 1) %>%
arrange(engine_number)
saveRDS(engines,paste0(varSave,"engines_data.rds"))             # Save using saveRDS() for later use
?readRDS
?rep
?mat
?matrix
#################################################################################################
# Arcidiacono and Miller (2011) coding assignment Part 2
# Matt Beamer & Cheng-Yu Chan
# 11/08/2014
#################################################################################################
source('header.R')
data<- readRDS(paste0(varSave,"engines_data.rds"))
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
s_1 = 1
s_2 = 4
pi_s = .25
beta = .99
x_m = max(data$replace_period) + 10
phat = matrix(rep(1, x_m*2), ncol = 2)
theta_1 = 10
theta_2 = 1
#################################################################################################
# Arcidiacono and Miller (2011) coding assignment
# Matt Beamer & Cheng-Yu Chan
# 11/08/2014
#################################################################################################
source('header.R')
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
N = 10^6
theta_1 = 10
theta_2 = 1
s_1 = 1
s_2 = 4
pi_s = .25
beta = .99
eta = 10^-5 #For calculating lower bound on x
x_m = max(x_bound(eta = eta, s = s_1), x_bound(eta = eta, s = s_2))
u <- values()
#################################################################################################
# Initialize CCPs
# p is starting CCP estimate
# phat is empty but initialized for the while loop
#################################################################################################
p <-
matrix(rep(0.5, (x_m + 1) * 4), ncol = 4) %>%
rbind(c(0, 0, 1, 1)) %>%
as.data.frame
phat <-
matrix(rep(0, (x_m + 2) * 4), ncol = 4) %>%
as.data.frame
#################################################################################################
# Apply the gamma operator to the CCP until phat converges to p.
# Convergence is defined as the greatest difference between the iterations being arbitrarily small.
#################################################################################################
while(max(abs(phat - p)) > 10^(-16)){
phat <- p
# Apply the F operator to get the difference in value between keeping the engine and replacing it
vals <- Foperator(P = phat)
# Apply the lambda operator to get the updated CCPs
p <- lambda(v_bar = vals)
}
#################################################################################################
# For N engines, with pi_s * N of them of type s_1 and (1 - pi_s) of them of type s_2, find the time until each engine is
# new again (replaced in the last period). Store the results in a data frame with three columns:
#   Column 1: engine number, from 1 to N
#   Column 2: type, 1 for s_1 and 2 for s_2
#   Column 3: mileage at replacement, x
#################################################################################################
engines <- data.frame(
engine_number = 1:N,
type = rbinom(N, 1, 1 - pi_s)
) %>%
mutate(type = type + 1) %>%
arrange(type)                                 # Sort by brand for easy merging of mileage data later
engine_count<- data.frame(table(engines[2]))    # Number of each brand from random draw.
history<-
cbind(todeath(engine_count[1, 1], engine_count[1, 2]),
todeath(engine_count[2, 1], engine_count[2, 2]))
engines<-
mutate(engines, replace_Period = apply(history, 2, which.min) - 1) %>%
arrange(engine_number) %>%
group_by(replace_Period) %>%
summarise(Total_replaced = n())
saveRDS(engines,paste0(varSave,"engines_data.rds"))             # Save using saveRDS() for later use
setwd("~/Projects/OPNS 523/Arcidiacono-2011")
source('code2/header.R')
data<- readRDS(paste0(varSave,"engines_data.rds"))
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
s.val <- c(1,4)
beta = .99
N = 10^6
x_m <- max(data$replace_Period) + 10
# Initial CCP
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
>>>>>>> origin/master
theta <- c(10,1)
pi_s = .27
setwd("~/Projects/OPNS 523/Arcidiacono-2011/code2")
source('header.R')
data<- readRDS(paste0(varSave,"engines_data.rds"))
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
s.val <- c(1,4)
beta = .99
N = 10^6
x_m <- max(data$replace_Period) + 10
# Initial CCP
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
>>>>>>> origin/master
theta <- c(10,1)
pi_s = .27
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
theta <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
MLE<- function(t, c, P){
gamma.Operator(CCP = P, theta = t, beta = beta) %>%
left_join(y = c, by = c("x.t" = "replace_Period")) %>%
mutate(Total_replaced = ifelse(is.na(Total_replaced), 0, Total_replaced)) %>%
left_join(y = q.s, by = c("x.t" = "x.t")) %>%
mutate(q.s = ifelse(s == s.val[1], q_1, q_2)) %>%
mutate(logl = -1 * Total_replaced * log(prob.replace^q.s)) %>%
select(logl) %>%
sum
}
theta <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
theta <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
}
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
theta <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
}
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
theta <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
?optim
data<- readRDS(paste0(varSave,"engines_data.rds"))
#################################################################################################
# Global parameters. Will not be passing into functions.
#################################################################################################
s.val <- c(1,4)
beta = .99
N = 10^6
x_m <- max(data$replace_Period) + 10
# Initial CCP
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
theta <- c(10,1)
pi_s = .27
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
theta <-
optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0)) %>%
select
theta <-
optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0)) %>%
select(par)
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0)) %>%
select
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
theta
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
theta
CCP<- readRDS(paste0(varSave,"trueCCP.rds"))
s.val <- c(1,4)
beta = .99
N = 10^6
x_m <- max(data$replace_Period) + 10
# Initial CCP
#CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
CCP<- readRDS(paste0(varSave,"trueCCP.rds"))
theta <- c(10,1)
pi_s = .27
# (2.17): compute next iteration of q.s
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
p
CCP
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
View(CCP)
CCP2<- readRDS(paste0(varSave,"trueCCP.rds"))
View(CCP2)
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
trueCCP<- readRDS(paste0(varSave,"trueCCP.rds"))
View(trueCCP)
trueCCP<- cbind(c(0:53),readRDS(paste0(varSave,"trueCCP.rds"))))
trueCCP<- cbind(c(0:53),readRDS(paste0(varSave,"trueCCP.rds")))
View(trueCCP)
CCP <- leftjoin(CCP, trueCCP, by = c("x.t" = "c(0:53)"))
CCP <- left_join(CCP, trueCCP, by = c("x.t" = "c(0:53)"))
View(CCP)
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
trueCCP<- cbind(c(0:53),readRDS(paste0(varSave,"trueCCP.rds")))
CCP <- left_join(CCP, trueCCP, by = c("x.t" = "c(0:53)")) %>%
mutate(prob.replace = ifelse(s == s.val[1], f_s1.1, f_s2.1)) %>%
mutate(prob.dont.replace = ifelse(s == s.val[1], f_s1, f_s2))
View(trueCCP)
View(CCP)
CCP <- expand.grid(s=s.val, x.t=seq(0, x_m), prob.replace = 0.5, prob.dont.replace = 0.5)
trueCCP<- cbind(c(0:53),readRDS(paste0(varSave,"trueCCP.rds")))
CCP <- left_join(CCP, trueCCP, by = c("x.t" = "c(0:53)")) %>%
mutate(prob.replace = ifelse(s == s.val[1], f_s1.1, f_s2.1)) %>%
mutate(prob.dont.replace = ifelse(s == s.val[1], f_s1, f_s2)) %>%
select(1:4)
View(CCP)
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
theta
CCPhat - CCP
View(CCPhat)
plot(CCP$prob.dont.replace)
plot(CCPhat$prob.dont.replace)
q.s
View(q.s)
plot(q.s)
plot(q.s$q_1)
plot(q.s$q_2)
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
theta
q.s <- CCP.to.likelihood(CCP) %>%
mutate(pi_s = ifelse(s == s.val[1], pi_s, 1 - pi_s)) %>%
group_by(s) %>%
mutate(likelihood = likelihood * pi_s) %>%
ungroup %>%
group_by(x.t) %>%
summarise(q_1 = likelihood[1]/sum(likelihood), q_2 = likelihood[2]/sum(likelihood)) %>%
ungroup
# (2.18): compute next iteration of pi_s
pi_s <- last(cumsum(q.s$q_1 * c(data$Total_replaced,rep(0,10))),order_by = q.s$x.t) / N
# (2.22): update CCPs
CCPhat <- gamma.Operator(CCP = CCP, theta = theta, beta = beta)
# (2.20): solving for optimal thetas
results <- optim(theta, MLE,
c = data, P = CCP,
method = 'L-BFGS-B', lower = c(0,0))
theta<- results$par
theta
